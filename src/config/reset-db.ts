import 'dotenv/config';
import { DataSource } from 'typeorm';
import * as readline from 'readline';

const AppDataSource = new DataSource({
 type: 'mysql',
 url: process.env.DATABASE_PUBLIC_URL,
 entities: ['src/models/*.ts'],
 synchronize: true,
 dropSchema: true,
});

function askQuestion(question: string): Promise<string> {
 const rl = readline.createInterface({
   input: process.stdin,
   output: process.stdout
 });

 return new Promise((resolve) => {
   rl.question(question, (answer) => {
     rl.close();
     resolve(answer);
   });
 });
}

async function resetDatabase() {
 try {
   console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!');
   console.log('üóÑÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:', process.env.DATABASE_PUBLIC_URL?.split('@')[1]?.split('/')[0]);
   
   const answer = await askQuestion('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): ');
   
   if (answer.toLowerCase() === 'y' || answer.toLowerCase() === 'yes') {
     console.log('üîÑ –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
     await AppDataSource.initialize();
     console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞ –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞');
     await AppDataSource.destroy();
   } else {
     console.log('‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
   }
 } catch (error) {
   console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ë–î:', error);
   process.exit(1);
 }
}

resetDatabase();
